‡∏°‡∏≤‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏à‡∏∞‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå `meechain.json` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö config blockchain ‡πÅ‡∏•‡∏∞ helper TypeScript ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô config ‡πÅ‡∏ö‡∏ö type-safe ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏ù‡∏±‡πà‡∏á React ‡πÅ‡∏•‡∏∞ backend üëá

---

## üìÅ `src/config/meechain.json`

```json
{
  "network": "mee-mainnet",
  "chainId": 2025,
  "rpcUrl": "https://rpc.meechain.io",
  "explorerUrl": "https://explorer.meechain.io",
  "contract": {
    "name": "MeeToken",
    "address": "0x1234567890abcdef1234567890abcdef12345678",
    "abiPath": "/src/contracts/MeeToken.abi.json"
  }
}
```

---

## üß† TypeScript Helper: `src/config/loadMeechain.ts`

```ts
import meechainConfig from './meechain.json'

type MeechainConfig = {
  network: string
  chainId: number
  rpcUrl: string
  explorerUrl: string
  contract: {
    name: string
    address: string
    abiPath: string
  }
}

export const getMeechainConfig = (): MeechainConfig => {
  return meechainConfig
}
```

---

## ‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô React ‡∏´‡∏£‡∏∑‡∏≠ Node.js

```ts
import { getMeechainConfig } from './config/loadMeechain'

const config = getMeechainConfig()

console.log(`üîó Connecting to ${config.network} via ${config.rpcUrl}`)
console.log(`üìú Contract ${config.contract.name} at ${config.contract.address}`)
```

---

## üîê ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Smart Contract

‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î ABI ‡πÅ‡∏ö‡∏ö dynamic ‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:

```ts
import fs from 'fs'
import path from 'path'

const abi = JSON.parse(
  fs.readFileSync(path.resolve(__dirname, config.contract.abiPath), 'utf-8')
)
```

> ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô frontend ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ dynamic `import()` ‡πÅ‡∏ó‡∏ô `fs`

---
